(function(window, jQuery, iziToast, WebSocket) {
    window.NotificationSocket = function($wrapper, currentUser) {

        this.$wrapper = $wrapper;
        this.currentUser = [currentUser];

        this.protocolSocket = window.location.protocol == 'https:' ? 'wss://' : 'ws://';
        this.chatSocket = new WebSocket(this.protocolSocket + window.location.host + '/ws/user/notifications/');

        this.chatSocket.onmessage = this.onMessage.bind(this);

        this.chatSocket.onopen = this.onOpen.bind(this);

        this.chatSocket.onclose = this.onClose.bind(this);

        this.chatSocket.onerror = this.onError.bind(this);

        this.usersToCall = null;

        this.connection = null;

//        this.configuration = {
//          iceServers: [{ urls: 'stun:stun2.1.google.com:19302' }, {'urls': 'stun:stun.services.mozilla.com'}, {'urls': 'stun:stun.stunprotocol.org:3478'},]
//        }

        this.configuration = {
            iceServers: [
                { 'urls': 'stun:stun.services.mozilla.com' }
            ]
        }

        this.$wrapper.on(
            'click',
            '#js-make-call',
            this.onCallMaking.bind(this)
        );

        this.$wrapper.on(
            'click',
            '#js-call-end',
            this.onCallEnd.bind(this)
        );

        this.$wrapper.on(
            'click',
            '#js-call-accept',
            this.onCallAccept.bind(this)
        );
    };

    $.extend(window.NotificationSocket.prototype, {
        initPeerToPeerConnection: async function () {

            let localStream;
            try{
                localStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                })
            }catch(e){
                console.error(e)
                return false;
            }

            this.connection = new RTCPeerConnection(this.configuration);

            this.$wrapper.find('#js-local-video')[0].srcObject = localStream;
            localStream.getTracks().forEach(track => this.connection.addTrack(track, localStream));

            this.connection.ontrack = event => {
                console.log(event.streams[0]);
                this.$wrapper.find('#js-remote-video')[0].srcObject = event.streams[0];
            }

            this.connection.onremovetrack = event => {
                console.log(event.streams[0]);
                this.$wrapper.find('#js-remote-video')[0].srcObject = event.streams[0];
            }

            this.connection.onicecandidate = event => {
                if (event.candidate) {
                    console.log(event.candidate);
                    this.chatSocket.send(JSON.stringify({type: 'candidate', candidate: event.candidate, from: this.currentUser, to: this.usersToCall}))
                }
            }

            this.connection.oniceconnectionstatechange = (event) => {
                console.log(event)
            }

            console.log(this.connection)
        },
        onCallMaking: async function (e){
            this.$wrapper.find('#js-call').css('display', 'block');
            this.$wrapper.find('#js-body-content').css('display', 'none');
            this.$wrapper.find('#js-call-accept').css('display', 'none');

            this.usersToCall = $(e.currentTarget).data('users-to-call');

            const callerAvatars = this.$wrapper.find('#js-caller-avatars').empty();
            $(e.currentTarget).data('users-to-call-info').forEach(function (value){
                callerAvatars.append(
                    '<a href="#" class="avatar avatar-lg rounded-circle" data-toggle="tooltip" data-original-title="'+ value.full_name +'">'+
                        '<img alt="Image placeholder" src="'+ value.avatar +'">'+
                    '</a>'
                );
            });

            this.chatSocket.send(JSON.stringify({type: 'call', from: this.currentUser, to: this.usersToCall}));
        },
        onCall : function (data){
            this.$wrapper.find('#js-call').css('display', 'block');
            this.$wrapper.find('#js-body-content').css('display', 'none');
            this.$wrapper.find('#js-chat').css('display', 'none');
            this.$wrapper.find('#js-call-accept').css('display', 'block');

            this.usersToCall = data.from;

            const callerAvatars = this.$wrapper.find('#js-caller-avatars').empty();
            data.callers.forEach(function (value){
                callerAvatars.append(
                    '<a href="#" class="avatar avatar-lg rounded-circle" data-toggle="tooltip" data-original-title="'+ value.full_name +'">'+
                        '<img alt="Image placeholder" src="'+ value.avatar +'">'+
                    '</a>'
                );
            });
        },
        onCallAccept: async function (e){
            this.$wrapper.find('#js-call').css('display', 'none');
            this.$wrapper.find('#js-body-content').css('display', 'none');
            this.$wrapper.find('#js-chat').css('display', 'block');

            await this.initPeerToPeerConnection();

            this.connection.createOffer( offer => {
                this.chatSocket.send(JSON.stringify({type: 'offer', offer: offer, from: this.currentUser, to: this.usersToCall}));
                this.connection.setLocalDescription(offer);
            }, error => {
                this.onCallEnd();
            });
        },
        onCallEnd : function (e){
            this.$wrapper.find('#js-call').css('display', 'none');
            this.$wrapper.find('#js-body-content').css('display', 'block');
            this.$wrapper.find('#js-chat').css('display', 'none');

            this.chatSocket.send(JSON.stringify({type: 'leave', to: this.usersToCall}));
        },
        onLeave : async function (e) {
            this.$wrapper.find('#js-call').css('display', 'none');
            this.$wrapper.find('#js-body-content').css('display', 'block');
            this.$wrapper.find('#js-chat').css('display', 'none');

            //document.querySelector('video#remote').src = null
            if (this.connection != null){
                this.connection.close()
                this.connection.onicecandidate = null
                this.connection.onaddstream = null
            }
            this.usersToCall = null
        },
        onHandleAnswer : async function (data){
            this.$wrapper.find('#js-call').css('display', 'none');
            this.$wrapper.find('#js-body-content').css('display', 'none');
            this.$wrapper.find('#js-chat').css('display', 'block');

            this.connection.setRemoteDescription(new RTCSessionDescription(data.answer))
        },
        onHandleCandidate : async function (data){
            this.connection.addIceCandidate(new RTCIceCandidate(data.candidate));
        },
        onHandleOffer : async function (data){
            this.$wrapper.find('#js-call').css('display', 'none');
            this.$wrapper.find('#js-body-content').css('display', 'none');
            this.$wrapper.find('#js-chat').css('display', 'block');

            await this.initPeerToPeerConnection();

            this.connection.setRemoteDescription(new RTCSessionDescription(data.offer))

            this.connection.createAnswer(
                answer => {
                    this.connection.setLocalDescription(answer)
                    this.chatSocket.send(JSON.stringify({type: 'answer', answer: answer, from: this.currentUser, to : data.from}))
                },
                error => {
                    console.log('Error when creating an answer', error);
                }
              )
        },
        onMessage : function(e) {
            const data = JSON.parse(e.data);

            switch (data.type) {
                case "notification":
                    const title = data['title'];
                    const avatar = data['avatar'];
                    const description = data['description'];
                    const url = data['url'];

                    iziToast.show({
                        theme: 'dark',
                        icon: 'icon-contacts',
                        title: title,
                        displayMode: 2,
                        message: description,
                        position: 'topCenter',
                        transitionIn: 'fadeInDown',
                        transitionOut: 'fadeOutDown',
                        progressBarColor: 'rgb(0, 255, 184)',
                        image: avatar,
                        imageWidth: 70,
                        layout: 2,
                        onClosed: function(instance, toast, closedBy){
                            console.info('Closed | closedBy: ' + closedBy);
                        },
                        iconColor: 'rgb(0, 255, 184)'
                    });
                    break;

                case "call":
                    this.onCall(data);
                    break;

                case "offer":
                    this.onHandleOffer(data);
                    break;

                case "answer":
                    this.onHandleAnswer(data);
                    break;

                case "candidate":
                    this.onHandleCandidate(data);
                    break;

                case "leave":
                    this.onLeave(data);
                    break;
                default:
                    break;
            }
        },
        onOpen : function open(e) {
            console.log('User notifications WebSockets connection created');
        },
        onClose: function(e) {
            console.log('User notifications WebSockets closed unexpectedly');
        },
        onError: function(error) {
            console.log(`User notifications WebSockets error ${error.message}`);
        }
    });
})(window, jQuery, iziToast, WebSocket);